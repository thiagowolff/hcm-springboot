import org.lesscss.LessCompiler
import java.time.LocalDate
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        springBootVersion = "2.4.5"
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.lesscss:lesscss:1.7.0.1.1"
    }
}

plugins {
    id "org.hidetake.ssh" version "2.10.1"
//    id "com.eriwen.gradle.css" version "2.14.0"
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

def webAppDir = "src/main/webapp"
def resourcesDir = "$webAppDir/resources"

bootJar {
    baseName "hcm"
    launchScript()
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.20"
    testImplementation "org.projectlombok:lombok:1.18.20"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation "com.github.ben-manes.caffeine:caffeine:3.0.1"
    implementation "org.ehcache:jcache:1.0.1"
    implementation "org.hibernate:hibernate-jcache:5.3.7.Final"
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "javax.faces:javax.faces-api:2.3"

    implementation "org.joinfaces:jsf-spring-boot-starter:4.1.13"
    implementation "org.joinfaces:omnifaces1-spring-boot-starter:4.1.13"
    implementation "org.primefaces:primefaces:8.0"
    implementation "com.github.adminfaces:admin-theme:1.0.0-RC12"

    implementation "br.com.litecode:litefaces-enum-i18n:1.0.2"
    implementation "com.google.guava:guava:27.0.1-jre"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "com.itextpdf:itextpdf:5.5.12"
    implementation "com.github.sps.pushover.net:pushover-client:1.0.0"

    runtime "org.postgresql:postgresql:42.2.19"
    runtime "javax.servlet:jstl:1.2"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"

    testImplementation "org.mockito:mockito-core:3.1.0"
    testImplementation "de.larmic:joinfaces-bean-test:1.0.0"

    testImplementation "org.hsqldb:hsqldb:2.4.1"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:3.6.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:3.6.0"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testImplementation "org.fluentlenium:fluentlenium-core:3.4.1"
    testImplementation "org.fluentlenium:fluentlenium-junit:3.4.1"
    testImplementation "org.fluentlenium:fluentlenium-assertj:3.4.1"
}

//minifyCss {
//    source = "$resourcesDir/css/style.css"
//    dest = "$resourcesDir/css/style.min.css"
//}

task compileLess {
    doLast {
        def lessCompiler = new LessCompiler()

        ant.replace(file: "$resourcesDir/less/style.less", token: "?ln=less", value: "")
        lessCompiler.compile(file("$projectDir/$resourcesDir/less/style.less"), file("$projectDir/$resourcesDir/css/style.css"))
        ant.replace(file: "$resourcesDir/less/style.less", token: ".less", value: ".less?ln=less")
    }
}

ext.loadVersionProperties = {
    def versionFile = "$projectDir/src/main/resources/version.properties"
    def versionProperties = new Properties()
    file(versionFile).withInputStream { versionProperties.load(it) }
    return versionProperties
}

def currentVersion = loadVersionProperties().version

task updateVersion {
    doLast {
        println(currentVersion)
        if (gradle.startParameter.taskNames[0] != "deploy") {
            return
        }

        def versionProperties = loadVersionProperties()
        def version = versionProperties.version.split("\\.")
        def nextMinorVersion = Integer.parseInt(version[2]) + 1
        def newVersion = version[0] + "." + version[1] + "." + nextMinorVersion

        LocalDate versionDate = LocalDate.parse(versionProperties.versionDate, DateTimeFormatter.ofPattern("dd/MM/yyyy"))

        if (versionDate == LocalDate.now()) {
            println("Version already incremented. Current version: $versionProperties.version")
            return
        }

        def versionFile = "$projectDir/src/main/resources/version.properties"
        ant.propertyfile(file: versionFile) {
            entry(key: "version", value: newVersion)
            entry(key: "versionDate", value: new Date().format('dd/MM/yyyy'))
        }

        println("New version: $newVersion")
    }
}

remotes {
    remoteServer {
        host = project.hasProperty("serverHost") ? serverHost : ""
        user = project.hasProperty("serverUser") ? serverUser : ""
        identity = file("/${System.properties['user.home']}/.ssh/id_rsa")
        knownHosts = allowAnyHosts
    }
}

task deleteCss {
    doLast {
        def cssFiles = [ new File("$webAppDir/resources/css/style.css"), new File("$webAppDir/resources/css/style.min.css") ]
        cssFiles.each { file ->  file.delete() }
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.remoteServer) {
                println("[1/5] Backing up previous release")
                def today = new Date().format('yyyy.MM.dd.HH.mm')

                try {
                    execute "cp /opt/hcm/hcm.jar /opt/hcm/releases/hcm-${currentVersion}-${today}.jar"
                } catch (Exception e) {
                    println "Unable to backup previous release"
                }

                println("[2/5] Uploading JAR")
                put from: "$projectDir/build/libs/hcm.jar", into: "/opt/hcm/hcm.jar"

                println("[3/5] Stopping application")
                execute "systemctl daemon-reload"
                execute "service hcm stop"

                println("[4/5] Starting application")
                execute "chmod +x /opt/hcm/hcm.jar"
                execute "/opt/hcm/hcmStart.sh"
                println("[5/5] Done!")
            }
        }
    }
}

compileJava {
    options.compilerArgs = [
        "-parameters"
    ]
}

processResources {
    from ("src/main/webapp") {
        into "META-INF/resources"
    }
}

processResources.dependsOn = ["updateVersion", "compileLess" ]
//jar.dependsOn = [ "compileLess", "minifyCss" ]
//jar.dependsOn = [ "compileLess" ]
deploy.dependsOn = [ "build", "test" ]

bootJar.finalizedBy deleteCss

test {
    exclude "br/com/litecode/integration/**"
}