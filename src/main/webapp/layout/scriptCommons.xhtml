<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
>

<ui:composition>
	<script>
		//<![CDATA[
		var loggedUser;
		var socket;
		var stompClient;

		function initWebsocket() {
			socket = SockJS('/push');
			stompClient = Stomp.over(socket);
			stompClient.debug = null;

			console.log("Websocket initialized!")
		}

		function register(registrations) {
			stompClient.connect({}, function (frame) {
				loggedUser = frame.headers['user-name'];
				registrations.forEach(function (registration) {
					stompClient.subscribe(registration.route, registration.callback);
					console.log("Registered", registration.route);
				});
			});
		}

		$().ready(function () {
			initWebsocket();
			register([
				{
					route: '/topic/progress',
					callback: function (data) {
						var sessionProgress = JSON.parse(data.body);
						if (typeof updateTimer !== 'undefined') {
							updateTimer(sessionProgress);
						}
					}
				},
				{
					route: '/topic/notify',
					callback: function (data) {
						var message = JSON.parse(data.body);
						handleMessage(message);
						if (typeof refreshSessions !== 'undefined') {
							refreshSessions([{name: "sessionId", value: message.sessionId}, {name: "eventType", value: message.eventType}]);
						}
					}
				},
				{
					route: '/topic/refresh',
					callback: function (data) {
						if (typeof refreshSessions !== 'undefined' && data.headers['user-name'] != loggedUser) {
							refreshSessions();
						}
					}
				},
				{
					route: '/topic/update',
					callback: function () {
						updateOnlineUsers();
					}
				}
			]);
		});

		function handleMessage(notificationMessage) {
			fetchUserSettings();

			window.getUserSettingsCallback = function (xhr, status, args) {
				var userSettings = args.userSettings ? JSON.parse(args.userSettings) : null;

				if (!userSettings || userSettings.notificationMessages) {
					var facesMessage = {
						summary: notificationMessage.messageSummary,
						detail: notificationMessage.messageDetail,
						severity: notificationMessage.eventType || 'info'
					};
					PF('growl').show([facesMessage]);
				}

				if (userSettings && userSettings.notificationSounds) {
					playSound(notificationMessage.eventType);
				}
			}
		}

		function playSound(eventType) {
			var audio = document.getElementById('audio');
			audio.src = '#{request.contextPath}/javax.faces.resource/sounds/' + eventType + '.mp3';
			setTimeout(function () {
				audio.play();
			}, 100);
		}

		function checkForInactivePatients() {
			var inactivePatients = new Boolean(#{fn:length(patientController.inactivePatients) gt 0});
			var isDeveloper = new Boolean(#{loginController.hasDevRights()}).valueOf();

			var url = location.href;
			var activePage = url.substring(url.lastIndexOf('/') + 1, url.length);
			var smallScreen = window.innerWidth <= 1024 && window.innerHeight <= 768;

			if ((activePage === '' || activePage === 'patients') && inactivePatients && inactivePatients.valueOf() && !smallScreen) {
				setTimeout(function() {
					PrimeFaces.widgets['inactivePatientsDialog'] && PF('inactivePatientsDialog').show();

					var closeIcon = $('#inactivePatientsForm a.ui-dialog-titlebar-icon.ui-dialog-titlebar-close');
					closeIcon.parent().append('<span id="countdown" style="font-size: 12px; float: right;" />');
					var secondsText = $('#countdown');
					closeIcon.hide();

					var waitTime = isDeveloper ? 1 : 30 + Math.floor((Math.random() * 30) + 1);
					var timer = setInterval(function() {
						secondsText.text(waitTime);
						waitTime -= 1;
						if (waitTime <= 0) {
							clearInterval(timer);
							closeIcon.show();
							secondsText.hide();
						}
					}, 1000);
				}, 1500);
			}
		}
		//]]>
	</script>
</ui:composition>
</html>